<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Art Catalogue</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background: #0a0a0a;
            color: #e0e0e0;
            height: 100vh;
            overflow: hidden;
        }

        .container {
            display: flex;
            height: 100vh;
        }

        /* Left Sidebar */
        .sidebar {
            width: 320px;
            background: linear-gradient(180deg, #1a1a1a 0%, #0d0d0d 100%);
            padding: 24px;
            overflow-y: auto;
            border-right: 1px solid #2a2a2a;
            box-shadow: 4px 0 24px rgba(0,0,0,0.5);
        }

        .sidebar h2 {
            font-size: 24px;
            margin-bottom: 24px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            font-weight: 700;
        }

        .filter-section {
            margin-bottom: 28px;
        }

        .filter-section h3 {
            font-size: 14px;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 12px;
            color: #888;
            font-weight: 600;
        }

        .search-input {
            width: 100%;
            padding: 12px 16px;
            background: #1a1a1a;
            border: 2px solid #333;
            border-radius: 8px;
            color: #e0e0e0;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .search-input:focus {
            outline: none;
            border-color: #667eea;
            background: #222;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
        }

        .tag-input-container {
            position: relative;
            margin-bottom: 12px;
        }

        .tag-list {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-top: 12px;
        }

        .tag {
            padding: 6px 12px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 20px;
            font-size: 12px;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .tag::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(255,255,255,0.1);
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .tag:hover::before {
            opacity: 1;
        }

        .tag.active {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
            transform: scale(1.05);
        }

        .tag-remove {
            margin-left: 8px;
            cursor: pointer;
            font-weight: bold;
        }

        .color-picker-container {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 10px;
            margin-top: 12px;
        }

        .color-option {
            width: 100%;
            aspect-ratio: 1;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 3px solid transparent;
            position: relative;
            overflow: hidden;
        }

        .color-option::after {
            content: '';
            position: absolute;
            inset: 0;
            background: radial-gradient(circle, rgba(255,255,255,0.3) 0%, transparent 70%);
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .color-option:hover {
            transform: scale(1.1);
        }

        .color-option:hover::after {
            opacity: 1;
        }

        .color-option.active {
            border-color: #fff;
            transform: scale(1.15);
            box-shadow: 0 0 20px currentColor;
        }

        .items-per-page {
            display: flex;
            gap: 8px;
            margin-top: 12px;
        }

        .items-per-page button {
            flex: 1;
            padding: 8px;
            background: #1a1a1a;
            border: 2px solid #333;
            border-radius: 6px;
            color: #e0e0e0;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: 600;
        }

        .items-per-page button:hover {
            background: #222;
            border-color: #667eea;
        }

        .items-per-page button.active {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-color: transparent;
        }

        /* Upload Section */
        .upload-btn {
            width: 100%;
            padding: 14px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border: none;
            border-radius: 8px;
            color: white;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            margin-top: 20px;
            position: relative;
            overflow: hidden;
        }

        .upload-btn::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            background: rgba(255,255,255,0.3);
            border-radius: 50%;
            transform: translate(-50%, -50%);
            transition: width 0.6s ease, height 0.6s ease;
        }

        .upload-btn:hover::before {
            width: 300px;
            height: 300px;
        }

        /* Gallery */
        .gallery-container {
            flex: 1;
            padding: 24px;
            overflow-y: auto;
            background: #0a0a0a;
        }

        .gallery-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 24px;
        }

        .gallery-info {
            color: #888;
            font-size: 14px;
        }

        .gallery {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 16px;
            animation: fadeIn 0.5s ease;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .gallery-item {
            aspect-ratio: 1;
            background: #1a1a1a;
            border-radius: 8px;
            overflow: hidden;
            cursor: pointer;
            transition: all 0.3s ease;
            position: relative;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        }

        .gallery-item:hover {
            transform: scale(1.05);
            box-shadow: 0 8px 24px rgba(102, 126, 234, 0.3);
        }

        .gallery-item img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .gallery-item-info {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            padding: 8px;
            background: linear-gradient(to top, rgba(0,0,0,0.9) 0%, transparent 100%);
            color: white;
            font-size: 11px;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .gallery-item:hover .gallery-item-info {
            opacity: 1;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.95);
            z-index: 1000;
            animation: modalFadeIn 0.3s ease;
        }

        @keyframes modalFadeIn {
            from {
                opacity: 0;
            }
            to {
                opacity: 1;
            }
        }

        .modal.active {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .modal-content {
            position: relative;
            max-width: 90%;
            max-height: 90%;
            animation: modalSlideIn 0.3s ease;
        }

        @keyframes modalSlideIn {
            from {
                transform: scale(0.9);
                opacity: 0;
            }
            to {
                transform: scale(1);
                opacity: 1;
            }
        }

        .modal-image {
            max-width: 100%;
            max-height: 90vh;
            border-radius: 8px;
            box-shadow: 0 20px 60px rgba(0,0,0,0.5);
        }

        .modal-close {
            position: absolute;
            top: -40px;
            right: 0;
            width: 36px;
            height: 36px;
            background: rgba(255,255,255,0.1);
            border: 2px solid rgba(255,255,255,0.3);
            border-radius: 50%;
            color: white;
            font-size: 20px;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: all 0.3s ease;
        }

        .modal-close:hover {
            background: rgba(255,255,255,0.2);
            transform: rotate(90deg);
        }

        /* Upload Modal */
        .upload-modal {
            background: #1a1a1a;
            border-radius: 12px;
            padding: 32px;
            max-width: 500px;
            width: 90%;
            box-shadow: 0 24px 48px rgba(0,0,0,0.5);
        }

        .upload-modal h3 {
            margin-bottom: 24px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }

        .upload-form-group {
            margin-bottom: 20px;
        }

        .upload-form-group label {
            display: block;
            margin-bottom: 8px;
            color: #888;
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: 1px;
        }

        .upload-form-group input,
        .upload-form-group select {
            width: 100%;
            padding: 10px;
            background: #0a0a0a;
            border: 2px solid #333;
            border-radius: 6px;
            color: #e0e0e0;
            transition: all 0.3s ease;
        }

        .upload-form-group input:focus,
        .upload-form-group select:focus {
            outline: none;
            border-color: #667eea;
            background: #111;
        }

        .file-input-wrapper {
            position: relative;
            overflow: hidden;
            display: inline-block;
            width: 100%;
        }

        .file-input-wrapper input[type=file] {
            position: absolute;
            left: -9999px;
        }

        .file-input-label {
            display: block;
            padding: 12px;
            background: #222;
            border: 2px dashed #667eea;
            border-radius: 8px;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .file-input-label:hover {
            background: #2a2a2a;
            border-color: #764ba2;
        }

        .form-buttons {
            display: flex;
            gap: 12px;
            margin-top: 24px;
        }

        .form-buttons button {
            flex: 1;
            padding: 12px;
            border: none;
            border-radius: 6px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .btn-secondary {
            background: #333;
            color: #e0e0e0;
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(102, 126, 234, 0.4);
        }

        .btn-secondary:hover {
            background: #444;
        }

        /* GitHub Integration Notice */
        .github-notice {
            margin-top: 12px;
            padding: 10px;
            background: rgba(102, 126, 234, 0.1);
            border-left: 3px solid #667eea;
            border-radius: 4px;
            font-size: 12px;
            color: #aaa;
        }

        /* Scrollbar Styling */
        ::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }

        ::-webkit-scrollbar-track {
            background: #0a0a0a;
        }

        ::-webkit-scrollbar-thumb {
            background: #333;
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: #444;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Left Sidebar -->
        <div class="sidebar">
            <h2>Art Catalogue</h2>
            
            <!-- Search -->
            <div class="filter-section">
                <h3>Search</h3>
                <input type="text" class="search-input" id="searchInput" placeholder="Search artworks...">
            </div>

            <!-- Tags -->
            <div class="filter-section">
                <h3>Tags</h3>
                <div class="tag-input-container">
                    <input type="text" class="search-input" id="tagInput" placeholder="Add tag and press Enter...">
                </div>
                <div class="tag-list" id="activeTags"></div>
            </div>

            <!-- Author Filter -->
            <div class="filter-section">
                <h3>Author</h3>
                <input type="text" class="search-input" id="authorFilter" placeholder="Filter by author...">
            </div>

            <!-- Color Scheme Filter -->
            <div class="filter-section">
                <h3>Color Scheme</h3>
                <div class="color-picker-container" id="colorPicker">
                    <div class="color-option" data-color="red" style="background: linear-gradient(135deg, #ff6b6b, #c92a2a);"></div>
                    <div class="color-option" data-color="blue" style="background: linear-gradient(135deg, #4dabf7, #1864ab);"></div>
                    <div class="color-option" data-color="green" style="background: linear-gradient(135deg, #51cf66, #2b8a3e);"></div>
                    <div class="color-option" data-color="yellow" style="background: linear-gradient(135deg, #ffd43b, #f08c00);"></div>
                    <div class="color-option" data-color="purple" style="background: linear-gradient(135deg, #b197fc, #7048e8);"></div>
                    <div class="color-option" data-color="pink" style="background: linear-gradient(135deg, #ff8cc3, #e64980);"></div>
                    <div class="color-option" data-color="monochrome" style="background: linear-gradient(135deg, #dee2e6, #212529);"></div>
                </div>
            </div>

            <!-- Items Per Page -->
            <div class="filter-section">
                <h3>Items Per Page</h3>
                <div class="items-per-page">
                    <button data-count="10">10</button>
                    <button data-count="20" class="active">20</button>
                    <button data-count="50">50</button>
                </div>
            </div>

            <!-- Upload Button -->
            <button class="upload-btn" id="uploadBtn">Upload New Artwork</button>

            <!-- GitHub Notice -->
            <div class="github-notice">
                Note: To enable GitHub storage, configure your repository settings in the upload dialog.
            </div>
        </div>

        <!-- Gallery -->
        <div class="gallery-container">
            <div class="gallery-header">
                <h2>Gallery</h2>
                <div class="gallery-info">
                    <span id="itemCount">0 items</span>
                </div>
            </div>
            <div class="gallery" id="gallery"></div>
        </div>
    </div>

    <!-- Image View Modal -->
    <div class="modal" id="imageModal">
        <div class="modal-content">
            <button class="modal-close" id="closeModal">×</button>
            <img class="modal-image" id="modalImage" src="" alt="">
        </div>
    </div>

    <!-- Upload Modal -->
    <div class="modal" id="uploadModal">
        <div class="upload-modal">
            <h3>Upload New Artwork</h3>
            <form id="uploadForm">
                <div class="upload-form-group">
                    <label for="imageFile">Select Image</label>
                    <div class="file-input-wrapper">
                        <input type="file" id="imageFile" accept="image/*" required>
                        <label for="imageFile" class="file-input-label">
                            <span id="fileName">Choose file or drag here...</span>
                        </label>
                    </div>
                </div>
                
                <div class="upload-form-group">
                    <label for="imageTitle">Title</label>
                    <input type="text" id="imageTitle" placeholder="Artwork title..." required>
                </div>
                
                <div class="upload-form-group">
                    <label for="imageAuthor">Author</label>
                    <input type="text" id="imageAuthor" placeholder="Artist name..." required>
                </div>
                
                <div class="upload-form-group">
                    <label for="imageTags">Tags (comma-separated)</label>
                    <input type="text" id="imageTags" placeholder="portrait, oil painting, renaissance...">
                </div>
                
                <div class="upload-form-group">
                    <label for="imageColor">Primary Color Scheme</label>
                    <select id="imageColor">
                        <option value="">Select color...</option>
                        <option value="red">Red</option>
                        <option value="blue">Blue</option>
                        <option value="green">Green</option>
                        <option value="yellow">Yellow</option>
                        <option value="purple">Purple</option>
                        <option value="pink">Pink</option>
                        <option value="monochrome">Monochrome</option>
                    </select>
                </div>

                <div class="upload-form-group">
                    <label for="githubRepo">GitHub Repository (optional)</label>
                    <input type="text" id="githubRepo" placeholder="username/repository">
                </div>

                <div class="upload-form-group">
                    <label for="githubToken">GitHub Token (optional)</label>
                    <input type="password" id="githubToken" placeholder="Your GitHub personal access token">
                </div>
                
                <div class="form-buttons">
                    <button type="submit" class="btn-primary">Upload</button>
                    <button type="button" class="btn-secondary" id="cancelUpload">Cancel</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // Application State
        let artworks = JSON.parse(localStorage.getItem('artCatalogue') || '[]');
        let filteredArtworks = [...artworks];
        let currentFilters = {
            search: '',
            tags: [],
            author: '',
            color: '',
            itemsPerPage: 20
        };

        // DOM Elements
        const gallery = document.getElementById('gallery');
        const searchInput = document.getElementById('searchInput');
        const tagInput = document.getElementById('tagInput');
        const activeTags = document.getElementById('activeTags');
        const authorFilter = document.getElementById('authorFilter');
        const colorPicker = document.getElementById('colorPicker');
        const itemCount = document.getElementById('itemCount');
        const imageModal = document.getElementById('imageModal');
        const modalImage = document.getElementById('modalImage');
        const closeModal = document.getElementById('closeModal');
        const uploadBtn = document.getElementById('uploadBtn');
        const uploadModal = document.getElementById('uploadModal');
        const uploadForm = document.getElementById('uploadForm');
        const cancelUpload = document.getElementById('cancelUpload');
        const imageFile = document.getElementById('imageFile');
        const fileName = document.getElementById('fileName');

        // Initialize
        function init() {
            renderGallery();
            setupEventListeners();
        }

        // Event Listeners
        function setupEventListeners() {
            // Search
            searchInput.addEventListener('input', (e) => {
                currentFilters.search = e.target.value.toLowerCase();
                applyFilters();
            });

            // Tags
            tagInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && e.target.value.trim()) {
                    addTag(e.target.value.trim());
                    e.target.value = '';
                }
            });

            // Author
            authorFilter.addEventListener('input', (e) => {
                currentFilters.author = e.target.value.toLowerCase();
                applyFilters();
            });

            // Color picker
            colorPicker.querySelectorAll('.color-option').forEach(option => {
                option.addEventListener('click', () => {
                    colorPicker.querySelectorAll('.color-option').forEach(opt => opt.classList.remove('active'));
                    if (currentFilters.color === option.dataset.color) {
                        currentFilters.color = '';
                    } else {
                        option.classList.add('active');
                        currentFilters.color = option.dataset.color;
                    }
                    applyFilters();
                });
            });

            // Items per page
            document.querySelectorAll('.items-per-page button').forEach(btn => {
                btn.addEventListener('click', () => {
                    document.querySelectorAll('.items-per-page button').forEach(b => b.classList.remove('active'));
                    btn.classList.add('active');
                    currentFilters.itemsPerPage = parseInt(btn.dataset.count);
                    renderGallery();
                });
            });

            // Modal controls
            closeModal.addEventListener('click', () => {
                imageModal.classList.remove('active');
            });

            imageModal.addEventListener('click', (e) => {
                if (e.target === imageModal) {
                    imageModal.classList.remove('active');
                }
            });

            // Upload controls
            uploadBtn.addEventListener('click', () => {
                uploadModal.classList.add('active');
            });

            cancelUpload.addEventListener('click', () => {
                uploadModal.classList.remove('active');
                uploadForm.reset();
                fileName.textContent = 'Choose file or drag here...';
            });

            uploadModal.addEventListener('click', (e) => {
                if (e.target === uploadModal) {
                    uploadModal.classList.remove('active');
                    uploadForm.reset();
                    fileName.textContent = 'Choose file or drag here...';
                }
            });

            // File input
            imageFile.addEventListener('change', (e) => {
                if (e.target.files.length > 0) {
                    fileName.textContent = e.target.files[0].name;
                }
            });

            // Upload form
            uploadForm.addEventListener('submit', handleUpload);

            // Keyboard shortcuts
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape') {
                    imageModal.classList.remove('active');
                    uploadModal.classList.remove('active');
                }
            });
        }

        // Tag Management
        function addTag(tag) {
            if (!currentFilters.tags.includes(tag)) {
                currentFilters.tags.push(tag);
                renderActiveTags();
                applyFilters();
            }
        }

        function removeTag(tag) {
            currentFilters.tags = currentFilters.tags.filter(t => t !== tag);
            renderActiveTags();
            applyFilters();
        }

        function renderActiveTags() {
            activeTags.innerHTML = currentFilters.tags.map(tag => `
                <span class="tag active">
                    ${tag}
                    <span class="tag-remove" onclick="removeTag('${tag}')">×</span>
                </span>
            `).join('');
        }

        // Filtering
        function applyFilters() {
            filteredArtworks = artworks.filter(artwork => {
                // Search filter
                if (currentFilters.search && 
                    !artwork.title.toLowerCase().includes(currentFilters.search) &&
                    !artwork.tags.some(tag => tag.toLowerCase().includes(currentFilters.search))) {
                    return false;
                }

                // Tag filter
                if (currentFilters.tags.length > 0 &&
                    !currentFilters.tags.every(tag => artwork.tags.includes(tag))) {
                    return false;
                }

                // Author filter
                if (currentFilters.author &&
                    !artwork.author.toLowerCase().includes(currentFilters.author)) {
                    return false;
                }

                // Color filter
                if (currentFilters.color && artwork.color !== currentFilters.color) {
                    return false;
                }

                return true;
            });

            renderGallery();
        }

        // Gallery Rendering
        function renderGallery() {
            const itemsToShow = filteredArtworks.slice(0, currentFilters.itemsPerPage);
            
            if (itemsToShow.length === 0) {
                gallery.innerHTML = `
                    <div style="grid-column: 1/-1; text-align: center; padding: 40px; color: #666;">
                        No artworks found. Upload your first artwork to get started!
                    </div>
                `;
            } else {
                gallery.innerHTML = itemsToShow.map((artwork, index) => `
                    <div class="gallery-item" onclick="openImage('${artwork.url}')">
                        <img src="${artwork.url}" alt="${artwork.title}" loading="lazy">
                        <div class="gallery-item-info">
                            <div>${artwork.title}</div>
                            <div style="opacity: 0.7; font-size: 10px;">${artwork.author}</div>
                        </div>
                    </div>
                `).join('');
            }

            itemCount.textContent = `${filteredArtworks.length} item${filteredArtworks.length !== 1 ? 's' : ''}`;
        }

        // Image Modal
        function openImage(url) {
            modalImage.src = url;
            imageModal.classList.add('active');
        }

        // Upload Handler
        async function handleUpload(e) {
            e.preventDefault();
            
            const file = imageFile.files[0];
            if (!file) return;

            // Read file as data URL
            const reader = new FileReader();
            reader.onload = async function(event) {
                const imageData = event.target.result;
                
                // Create artwork object
                const artwork = {
                    id: Date.now(),
                    title: document.getElementById('imageTitle').value,
                    author: document.getElementById('imageAuthor').value,
                    tags: document.getElementById('imageTags').value
                        .split(',')
                        .map(tag => tag.trim())
                        .filter(tag => tag),
                    color: document.getElementById('imageColor').value,
                    url: imageData,
                    uploadDate: new Date().toISOString()
                };

                // GitHub integration (if configured)
                const githubRepo = document.getElementById('githubRepo').value;
                const githubToken = document.getElementById('githubToken').value;

                if (githubRepo && githubToken) {
                    try {
                        await uploadToGitHub(file, artwork, githubRepo, githubToken);
                    } catch (error) {
                        console.error('GitHub upload failed:', error);
                        alert('GitHub upload failed. Image saved locally.');
                    }
                }

                // Add to collection
                artworks.unshift(artwork);
                localStorage.setItem('artCatalogue', JSON.stringify(artworks));
                
                // Reset and update
                uploadModal.classList.remove('active');
                uploadForm.reset();
                fileName.textContent = 'Choose file or drag here...';
                
                // Refresh gallery
                filteredArtworks = [...artworks];
                applyFilters();
            };

            reader.readAsDataURL(file);
        }

        // GitHub Upload (requires proper authentication)
        async function uploadToGitHub(file, artwork, repo, token) {
            const [owner, repoName] = repo.split('/');
            const fileName = `artworks/${artwork.id}_${file.name}`;
            
            // Convert file to base64
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.onload = async function() {
                    const base64 = btoa(reader.result);
                    
                    try {
                        const response = await fetch(`https://api.github.com/repos/${owner}/${repoName}/contents/${fileName}`, {
                            method: 'PUT',
                            headers: {
                                'Authorization': `token ${token}`,
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify({
                                message: `Upload artwork: ${artwork.title}`,
                                content: base64,
                                branch: 'main'
                            })
                        });

                        if (response.ok) {
                            const data = await response.json();
                            artwork.githubUrl = data.content.download_url;
                            console.log('Successfully uploaded to GitHub:', data.content.download_url);
                            resolve(data);
                        } else {
                            throw new Error('GitHub API request failed');
                        }
                    } catch (error) {
                        reject(error);
                    }
                };
                reader.onerror = reject;
                reader.readAsBinaryString(file);
            });
        }

        // Initialize the application
        init();
