<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Art Catalogue</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Arial, sans-serif;
            background: #1a1a1a;
            color: #e0e0e0;
            min-height: 100vh;
        }

        .container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar */
        .sidebar {
            width: 300px;
            background: #242424;
            padding: 20px;
            overflow-y: auto;
            border-right: 1px solid #333;
        }

        .sidebar h1 {
            font-size: 24px;
            margin-bottom: 30px;
            color: #667eea;
        }

        .section {
            margin-bottom: 25px;
        }

        .section h3 {
            font-size: 12px;
            text-transform: uppercase;
            letter-spacing: 1px;
            margin-bottom: 10px;
            color: #888;
        }

        input[type="text"], input[type="file"], select {
            width: 100%;
            padding: 10px;
            background: #1a1a1a;
            border: 1px solid #444;
            border-radius: 5px;
            color: #e0e0e0;
            margin-bottom: 10px;
        }

        input[type="text"]:focus, select:focus {
            outline: none;
            border-color: #667eea;
        }

        .tag-container {
            display: flex;
            flex-wrap: wrap;
            gap: 5px;
            margin-top: 10px;
        }

        .tag {
            padding: 5px 10px;
            background: #667eea;
            border-radius: 15px;
            font-size: 12px;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            gap: 5px;
        }

        .tag:hover {
            background: #5a6fd8;
        }

        .tag.active {
            background: #9333ea;
        }

        .color-grid {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 10px;
            margin-top: 10px;
        }

        .color-box {
            aspect-ratio: 1;
            border-radius: 5px;
            cursor: pointer;
            border: 2px solid transparent;
            transition: all 0.3s;
        }

        .color-box:hover {
            transform: scale(1.1);
        }

        .color-box.active {
            border-color: #fff;
            box-shadow: 0 0 10px rgba(255,255,255,0.3);
        }

        .count-buttons {
            display: flex;
            gap: 10px;
        }

        .count-btn {
            flex: 1;
            padding: 8px;
            background: #2a2a2a;
            border: 1px solid #444;
            border-radius: 5px;
            color: #e0e0e0;
            cursor: pointer;
        }

        .count-btn:hover {
            background: #333;
        }

        .count-btn.active {
            background: #667eea;
            border-color: #667eea;
        }

        .upload-section {
            margin-top: 30px;
            padding-top: 30px;
            border-top: 1px solid #444;
        }

        .btn {
            width: 100%;
            padding: 12px;
            background: #667eea;
            border: none;
            border-radius: 5px;
            color: white;
            cursor: pointer;
            font-weight: 600;
            margin-bottom: 10px;
        }

        .btn:hover {
            background: #5a6fd8;
        }

        .btn-danger {
            background: #dc2626;
        }

        .btn-danger:hover {
            background: #b91c1c;
        }

        /* Gallery */
        .gallery-container {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
        }

        .gallery-header {
            margin-bottom: 20px;
        }

        .gallery-header h2 {
            font-size: 20px;
            margin-bottom: 5px;
        }

        .gallery-info {
            color: #888;
            font-size: 14px;
        }

        .gallery {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 15px;
        }

        .gallery-item {
            background: #242424;
            border-radius: 8px;
            overflow: hidden;
            cursor: pointer;
            transition: transform 0.3s;
            position: relative;
        }

        .gallery-item:hover {
            transform: scale(1.05);
        }

        .gallery-item img {
            width: 100%;
            height: 200px;
            object-fit: cover;
            display: block;
        }

        .gallery-item-info {
            padding: 10px;
            font-size: 12px;
        }

        .gallery-item-title {
            font-weight: 600;
            margin-bottom: 3px;
        }

        .gallery-item-author {
            color: #888;
            font-size: 11px;
        }

        .empty-state {
            text-align: center;
            padding: 50px;
            color: #666;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.9);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }

        .modal.active {
            display: flex;
        }

        .modal-content {
            position: relative;
            max-width: 90%;
            max-height: 90%;
        }

        .modal img {
            max-width: 100%;
            max-height: 90vh;
            object-fit: contain;
        }

        .modal-close {
            position: absolute;
            top: -40px;
            right: 0;
            color: white;
            font-size: 30px;
            cursor: pointer;
            width: 40px;
            height: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: rgba(255,255,255,0.1);
            border-radius: 50%;
        }

        .modal-close:hover {
            background: rgba(255,255,255,0.2);
        }

        .status-message {
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            font-size: 12px;
            display: none;
        }

        .status-message.success {
            background: #065f46;
            color: #10b981;
            display: block;
        }

        .status-message.error {
            background: #7f1d1d;
            color: #f87171;
            display: block;
        }
    </style>
</head>
<body>
    <div class="container">
        <!-- Sidebar -->
        <div class="sidebar">
            <h1>ðŸŽ¨ Art Catalogue</h1>
            
            <!-- Search -->
            <div class="section">
                <h3>Search</h3>
                <input type="text" id="searchInput" placeholder="Search artworks...">
            </div>

            <!-- Tags Filter -->
            <div class="section">
                <h3>Filter by Tags</h3>
                <input type="text" id="tagInput" placeholder="Type tag and press Enter...">
                <div class="tag-container" id="activeTags"></div>
            </div>

            <!-- Author Filter -->
            <div class="section">
                <h3>Filter by Author</h3>
                <input type="text" id="authorInput" placeholder="Author name...">
            </div>

            <!-- Color Filter -->
            <div class="section">
                <h3>Filter by Color</h3>
                <div class="color-grid">
                    <div class="color-box" data-color="red" style="background: #ef4444;"></div>
                    <div class="color-box" data-color="blue" style="background: #3b82f6;"></div>
                    <div class="color-box" data-color="green" style="background: #10b981;"></div>
                    <div class="color-box" data-color="yellow" style="background: #f59e0b;"></div>
                    <div class="color-box" data-color="purple" style="background: #8b5cf6;"></div>
                    <div class="color-box" data-color="pink" style="background: #ec4899;"></div>
                    <div class="color-box" data-color="mono" style="background: #6b7280;"></div>
                    <div class="color-box" data-color="all" style="background: linear-gradient(45deg, #ef4444, #3b82f6, #10b981, #f59e0b);"></div>
                </div>
            </div>

            <!-- Items per page -->
            <div class="section">
                <h3>Items per Page</h3>
                <div class="count-buttons">
                    <button class="count-btn" data-count="10">10</button>
                    <button class="count-btn active" data-count="20">20</button>
                    <button class="count-btn" data-count="50">50</button>
                </div>
            </div>

            <!-- Upload Section -->
            <div class="upload-section">
                <h3>Add New Artwork</h3>
                <input type="file" id="fileInput" accept="image/*">
                <input type="text" id="titleInput" placeholder="Title">
                <input type="text" id="authorNameInput" placeholder="Author">
                <input type="text" id="tagsInput" placeholder="Tags (comma-separated)">
                <select id="colorSelect">
                    <option value="">Select color scheme...</option>
                    <option value="red">Red</option>
                    <option value="blue">Blue</option>
                    <option value="green">Green</option>
                    <option value="yellow">Yellow</option>
                    <option value="purple">Purple</option>
                    <option value="pink">Pink</option>
                    <option value="mono">Monochrome</option>
                </select>
                <button class="btn" onclick="uploadArtwork()">Upload Artwork</button>
                <div id="statusMessage" class="status-message"></div>
                <button class="btn btn-danger" onclick="clearAll()">Clear All Data</button>
            </div>
        </div>

        <!-- Gallery -->
        <div class="gallery-container">
            <div class="gallery-header">
                <h2>Gallery</h2>
                <div class="gallery-info" id="galleryInfo">0 artworks</div>
            </div>
            <div class="gallery" id="gallery"></div>
        </div>
    </div>

    <!-- Image Modal -->
    <div class="modal" id="modal">
        <div class="modal-content">
            <span class="modal-close" onclick="closeModal()">&times;</span>
            <img id="modalImage" src="" alt="">
        </div>
    </div>

    <script>
        // Data management
        let artworks = [];
        let filteredArtworks = [];
        let currentFilters = {
            search: '',
            tags: [],
            author: '',
            color: '',
            itemsPerPage: 20
        };

        // Initialize
        function init() {
            loadArtworks();
            setupEventListeners();
            renderGallery();
        }

        // Load artworks from localStorage
        function loadArtworks() {
            const stored = localStorage.getItem('artCatalogue');
            if (stored) {
                try {
                    artworks = JSON.parse(stored);
                    filteredArtworks = [...artworks];
                } catch (e) {
                    console.error('Error loading artworks:', e);
                    artworks = [];
                    filteredArtworks = [];
                }
            }
        }

        // Save artworks to localStorage
        function saveArtworks() {
            try {
                localStorage.setItem('artCatalogue', JSON.stringify(artworks));
                return true;
            } catch (e) {
                console.error('Error saving:', e);
                showStatus('Storage error - image might be too large', 'error');
                return false;
            }
        }

        // Setup event listeners
        function setupEventListeners() {
            // Search
            document.getElementById('searchInput').addEventListener('input', (e) => {
                currentFilters.search = e.target.value.toLowerCase();
                applyFilters();
            });

            // Tag input
            document.getElementById('tagInput').addEventListener('keypress', (e) => {
                if (e.key === 'Enter' && e.target.value.trim()) {
                    addFilterTag(e.target.value.trim());
                    e.target.value = '';
                }
            });

            // Author filter
            document.getElementById('authorInput').addEventListener('input', (e) => {
                currentFilters.author = e.target.value.toLowerCase();
                applyFilters();
            });

            // Color filters
            document.querySelectorAll('.color-box').forEach(box => {
                box.addEventListener('click', () => {
                    // Clear other selections
                    document.querySelectorAll('.color-box').forEach(b => b.classList.remove('active'));
                    
                    if (currentFilters.color === box.dataset.color) {
                        currentFilters.color = '';
                    } else {
                        box.classList.add('active');
                        currentFilters.color = box.dataset.color;
                    }
                    
                    if (box.dataset.color === 'all') {
                        currentFilters.color = '';
                    }
                    
                    applyFilters();
                });
            });

            // Items per page
            document.querySelectorAll('.count-btn').forEach(btn => {
                btn.addEventListener('click', () => {
                    document.querySelectorAll('.count-btn').forEach(b => b.classList.remove('active'));
                    btn.classList.add('active');
                    currentFilters.itemsPerPage = parseInt(btn.dataset.count);
                    renderGallery();
                });
            });

            // Close modal on click outside
            document.getElementById('modal').addEventListener('click', (e) => {
                if (e.target.id === 'modal') {
                    closeModal();
                }
            });

            // Keyboard shortcuts
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape') {
                    closeModal();
                }
            });
        }

        // Add filter tag
        function addFilterTag(tag) {
            if (!currentFilters.tags.includes(tag)) {
                currentFilters.tags.push(tag);
                renderFilterTags();
                applyFilters();
            }
        }

        // Remove filter tag
        function removeFilterTag(tag) {
            currentFilters.tags = currentFilters.tags.filter(t => t !== tag);
            renderFilterTags();
            applyFilters();
        }

        // Render filter tags
        function renderFilterTags() {
            const container = document.getElementById('activeTags');
            container.innerHTML = currentFilters.tags.map(tag => 
                `<span class="tag active" onclick="removeFilterTag('${tag}')">${tag} Ã—</span>`
            ).join('');
        }

        // Apply filters
        function applyFilters() {
            filteredArtworks = artworks.filter(artwork => {
                // Search filter
                if (currentFilters.search) {
                    const searchTerm = currentFilters.search;
                    const matchesSearch = 
                        artwork.title.toLowerCase().includes(searchTerm) ||
                        artwork.author.toLowerCase().includes(searchTerm) ||
                        artwork.tags.some(tag => tag.toLowerCase().includes(searchTerm));
                    
                    if (!matchesSearch) return false;
                }

                // Tag filter
                if (currentFilters.tags.length > 0) {
                    const hasAllTags = currentFilters.tags.every(tag => 
                        artwork.tags.some(artTag => artTag.toLowerCase() === tag.toLowerCase())
                    );
                    if (!hasAllTags) return false;
                }

                // Author filter
                if (currentFilters.author) {
                    if (!artwork.author.toLowerCase().includes(currentFilters.author)) {
                        return false;
                    }
                }

                // Color filter
                if (currentFilters.color && artwork.color !== currentFilters.color) {
                    return false;
                }

                return true;
            });

            renderGallery();
        }

        // Render gallery
        function renderGallery() {
            const gallery = document.getElementById('gallery');
            const galleryInfo = document.getElementById('galleryInfo');
            
            const itemsToShow = filteredArtworks.slice(0, currentFilters.itemsPerPage);
            
            galleryInfo.textContent = `${filteredArtworks.length} artwork${filteredArtworks.length !== 1 ? 's' : ''}`;
            
            if (itemsToShow.length === 0) {
                gallery.innerHTML = '<div class="empty-state">No artworks found. Upload your first artwork to get started!</div>';
                return;
            }
            
            gallery.innerHTML = itemsToShow.map(artwork => `
                <div class="gallery-item" onclick="openModal('${artwork.id}')">
                    <img src="${artwork.thumbnail || artwork.url}" alt="${artwork.title}">
                    <div class="gallery-item-info">
                        <div class="gallery-item-title">${artwork.title}</div>
                        <div class="gallery-item-author">${artwork.author}</div>
                    </div>
                </div>
            `).join('');
        }

        // Upload artwork
        async function uploadArtwork() {
            const fileInput = document.getElementById('fileInput');
            const titleInput = document.getElementById('titleInput');
            const authorInput = document.getElementById('authorNameInput');
            const tagsInput = document.getElementById('tagsInput');
            const colorSelect = document.getElementById('colorSelect');
            
            if (!fileInput.files[0]) {
                showStatus('Please select an image', 'error');
                return;
            }
            
            if (!titleInput.value.trim()) {
                showStatus('Please enter a title', 'error');
                return;
            }
            
            const file = fileInput.files[0];
            
            // Check file size (limit to 5MB for localStorage)
            if (file.size > 5 * 1024 * 1024) {
                showStatus('Image too large. Please use images under 5MB.', 'error');
                return;
            }
            
            // Read file
            const reader = new FileReader();
            reader.onload = function(e) {
                const artwork = {
                    id: Date.now().toString(),
                    title: titleInput.value.trim(),
                    author: authorInput.value.trim() || 'Unknown',
                    tags: tagsInput.value.split(',').map(t => t.trim()).filter(t => t),
                    color: colorSelect.value,
                    url: e.target.result,
                    thumbnail: e.target.result, // In a real app, you'd create a smaller version
                    dateAdded: new Date().toISOString()
                };
                
                artworks.unshift(artwork);
                
                if (saveArtworks()) {
                    // Clear inputs
                    fileInput.value = '';
                    titleInput.value = '';
                    authorInput.value = '';
                    tagsInput.value = '';
                    colorSelect.value = '';
                    
                    showStatus('Artwork uploaded successfully!', 'success');
                    
                    // Refresh gallery
                    filteredArtworks = [...artworks];
                    applyFilters();
                }
            };
            
            reader.onerror = function() {
                showStatus('Error reading file', 'error');
            };
            
            reader.readAsDataURL(file);
        }

        // Open modal
        function openModal(id) {
            const artwork = artworks.find(a => a.id === id);
            if (artwork) {
                document.getElementById('modalImage').src = artwork.url;
                document.getElementById('modal').classList.add('active');
            }
        }

        // Close modal
        function closeModal() {
            document.getElementById('modal').classList.remove('active');
        }

        // Show status message
        function showStatus(message, type) {
            const statusEl = document.getElementById('statusMessage');
            statusEl.textContent = message;
            statusEl.className = `status-message ${type}`;
            
            setTimeout(() => {
                statusEl.className = 'status-message';
            }, 3000);
        }

        // Clear all data
        function clearAll() {
            if (confirm('Are you sure you want to delete all artworks? This cannot be undone.')) {
                localStorage.removeItem('artCatalogue');
                artworks = [];
                filteredArtworks = [];
                renderGallery();
                showStatus('All data cleared', 'success');
            }
        }

        // Start the app
        init();
    </script>
</body>
</html>
